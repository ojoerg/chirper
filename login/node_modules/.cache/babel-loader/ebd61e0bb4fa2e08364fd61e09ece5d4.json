{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Olli\\\\Projects\\\\full stack\\\\complete\\\\login\\\\src\\\\context\\\\GlobalState.js\";\nimport React, { createContext, useReducer } from \"react\";\nimport AppReducer from \"./AppReducer\"; // Initial State\n\nconst initialState = {\n  message: \"\",\n  loggedIn: false,\n  username: \"\",\n  checkAuthenticated: false\n}; // Create context\n\nexport const GlobalContext = createContext(initialState); // Provider Component\n\nexport const GlobalProvider = ({\n  children\n}) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState); // Actions\n\n  async function checkAuthenticated() {\n    try {\n      const res = await fetch(\"api/v1/users/authenticated\", {\n        credentials: \"include\"\n      });\n      const response = await res.json();\n      console.log(response);\n\n      if (response.error) {\n        throw response.error;\n      } else if (response.success === false) {\n        dispatch({\n          type: \"AUTHENTICATED_ERROR\"\n        });\n      } else {\n        dispatch({\n          type: \"AUTHENTICATE_USER\",\n          username: response.username\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: \"REGISTER_ERROR\",\n        msg: err\n      });\n    }\n  }\n\n  async function registerUser(user) {\n    try {\n      const res = await fetch(\"api/v1/users/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(user)\n      });\n      const response = await res.json();\n\n      if (response.error) {\n        throw response.error;\n      } else {\n        dispatch({\n          type: \"REGISTER_USER\",\n          msg: \"User successfully created\"\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: \"REGISTER_ERROR\",\n        msg: err\n      });\n    }\n  }\n\n  async function loginUser(user) {\n    try {\n      const res = await fetch(\"api/v1/users/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(user)\n      });\n      const response = await res.json();\n\n      if (response.error) {\n        throw response.error;\n      } else {\n        dispatch({\n          type: \"LOGIN_USER\",\n          msg: response.message,\n          username: response.username\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: \"LOGIN_ERROR\",\n        msg: err.data.error\n      });\n    }\n  }\n\n  function setAuthenticatedChecked() {\n    dispatch({\n      type: \"AUTHENTICATED_CHECKED\"\n    });\n  }\n\n  return React.createElement(GlobalContext.Provider, {\n    value: {\n      message: state.message,\n      loggedIn: state.loggedIn,\n      checkAuthenticated,\n      registerUser,\n      loginUser\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, children);\n};","map":{"version":3,"sources":["C:/Users/Olli/Projects/full stack/complete/login/src/context/GlobalState.js"],"names":["React","createContext","useReducer","AppReducer","initialState","message","loggedIn","username","checkAuthenticated","GlobalContext","GlobalProvider","children","state","dispatch","res","fetch","credentials","response","json","console","log","error","success","type","err","msg","registerUser","user","method","headers","body","JSON","stringify","loginUser","data","setAuthenticatedChecked"],"mappings":"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","sourcesContent":["import React, { createContext, useReducer } from \"react\";\r\nimport AppReducer from \"./AppReducer\";\r\n\r\n// Initial State\r\nconst initialState = {\r\n  message: \"\",\r\n  loggedIn: false,\r\n  username: \"\",\r\n  checkAuthenticated: false\r\n};\r\n\r\n// Create context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n// Provider Component\r\nexport const GlobalProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n  // Actions\r\n  async function checkAuthenticated() {\r\n    try {\r\n      const res = await fetch(\"api/v1/users/authenticated\", {\r\n          credentials: \"include\"\r\n      });\r\n      const response = await res.json();\r\n      console.log(response)\r\n\r\n      if (response.error) {\r\n        throw response.error;\r\n      } else if (response.success === false) {\r\n        dispatch({\r\n          type: \"AUTHENTICATED_ERROR\"\r\n        });\r\n      }else {\r\n        dispatch({\r\n          type: \"AUTHENTICATE_USER\",\r\n          username: response.username\r\n        });\r\n      }\r\n    } catch (err) {\r\n      dispatch({\r\n        type: \"REGISTER_ERROR\",\r\n        msg: err\r\n      });\r\n    }\r\n  }\r\n\r\n  async function registerUser(user) {\r\n    try {\r\n      const res = await fetch(\"api/v1/users/register\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(user)\r\n      });\r\n      const response = await res.json();\r\n      if (response.error) {\r\n        throw response.error;\r\n      } else {\r\n        dispatch({\r\n          type: \"REGISTER_USER\",\r\n          msg: \"User successfully created\"\r\n        });\r\n      }\r\n    } catch (err) {\r\n      dispatch({\r\n        type: \"REGISTER_ERROR\",\r\n        msg: err\r\n      });\r\n    }\r\n  }\r\n\r\n  async function loginUser(user) {\r\n    try {\r\n      const res = await fetch(\"api/v1/users/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(user)\r\n      });\r\n      const response = await res.json();\r\n\r\n      if (response.error) {\r\n        throw response.error;\r\n      } else {\r\n        dispatch({\r\n          type: \"LOGIN_USER\",\r\n          msg: response.message,\r\n          username: response.username\r\n        });\r\n      }\r\n    } catch (err) {\r\n      dispatch({\r\n        type: \"LOGIN_ERROR\",\r\n        msg: err.data.error\r\n      });\r\n    }\r\n  }\r\n\r\n  function setAuthenticatedChecked(){\r\n    dispatch({\r\n      type: \"AUTHENTICATED_CHECKED\"\r\n    });\r\n  }\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        message: state.message,\r\n        loggedIn: state.loggedIn,\r\n        checkAuthenticated,\r\n        registerUser,\r\n        loginUser\r\n      }}>\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}